"""
Q4. Min Sum Path in Matrix

Problem Description
Given a M x N grid A of integers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Return the minimum sum of the path.

NOTE: You can only move either down or right at any point in time.



Problem Constraints
1 <= M, N <= 2000

-1000 <= A[i][j] <= 1000



Input Format
First and only argument is a 2-D grid A.



Output Format
Return an integer denoting the minimum sum of the path.



Example Input
Input 1:

 A = [
       [1, 3, 2]
       [4, 3, 1]
       [5, 6, 1]
     ]
Input 2:

 A = [
       [1, -3, 2]
       [2, 5, 10]
       [5, -5, 1]
     ]


Example Output
Output 1:

 8
Output 2:

 -1


Example Explanation
Explanation 1:

 The path will be: 1 -> 3 -> 2 -> 1 -> 1.
Input 2:

 The path will be: 1 -> -3 -> 5 -> -5 -> 1.

"""

class Solution:
	# @param A : list of list of integers
	# @return an integer
    '''
    def solve(self,A,arr,i,j):
        
        if(i<0 or j<0):
            return 0
        if(arr[i][j]!=-1):
            return arr[i][j]
        
        if(i==0 or j==0):
            arr[i][j] = A[i][j]
            return arr[i][j]
        
        arr[i][j] = min(self.solve(A,arr,i-1,j), self.solve(A,arr,i,j-1))
        return arr[i][j]
    '''

	def minPathSum(self, A):
        arr = [[0 for x in range(len(A[0]))] for x in range(len(A))]

        # set 0th row
        arr[0][0] = A[0][0]
        for j in range(1, len(A[0])):
            arr[0][j] = arr[0][j - 1] + A[0][j]

        # set 0th column
        for i in range(1, len(A)):
            arr[i][0] = arr[i - 1][0] + A[i][0]


        
        for i in range(1, len(A)):
            for j in range(1, len(A[0])):

                arr[i][j] = A[i][j] + min(arr[i - 1][j], arr[i][j - 1])

        return arr[len(A) - 1][len(A[0]) - 1]

