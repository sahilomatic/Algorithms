"""
Problem Description

Given a singly linked list A

 A: A0 → A1 → … → An-1 → An 
reorder it to:

 A0 → An → A1 → An-1 → A2 → An-2 → … 
You must do this in-place without altering the nodes' values.



Problem Constraints

1 <= |A| <= 106



Input Format

The first and the only argument of input contains a pointer to the head of the linked list A.



Output Format

Return a pointer to the head of the modified linked list.



Example Input

Input 1:

 A = [1, 2, 3, 4, 5] 
Input 2:

 A = [1, 2, 3, 4] 


Example Output

Output 1:

 [1, 5, 2, 4, 3] 
Output 2:

 [1, 4, 2, 3] 


Example Explanation

Explanation 1:

 The array will be arranged to [A0, An, A1, An-1, A2].
Explanation 2:

 The array will be arranged to [A0, An, A1, An-1, A2].
"""



# Definition for singly-linked list.
# class ListNode:
#	def __init__(self, x):
#		self.val = x
#		self.next = None

class Solution:
	# @param A : head node of linked list
	# @return the head node in the linked list

    def find_mid(self,A):
        fast = A
        slow = A
        while(fast.next!=None and fast.next.next!=None):
            fast = fast.next.next
            slow= slow.next
        
        temp = slow.next
        slow.next = None
        return temp
    

    def reverseList(self,A):
        # 4 5 6
        p1,p2,p3  = None,A,None
        while(p2!=None):
            p3 = p2.next
            p2.next = p1
            p1 = p2
            p2 = p3
        
        return p1

	def reorderList(self, A):
        
        if(A is None or A.next is None):
            return A

        node = self.find_mid(A)
        
        
        secondNode = self.reverseList(node)
        #return secondNode

        p1 = A
        p2 = secondNode

        current = ListNode(1)
        
        head = current
        
        
        
        while(p2!=None or p1!=None):
            
            if(p1 is not None):
                
                current.next = p1

                current = current.next
                p1 = p1.next
            
        
            
            if(p2 is not None):
                current.next = p2
                current = current.next
                p2 = p2.next

            
        
            
        
        
        return head.next

