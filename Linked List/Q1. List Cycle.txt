"""
Problem Description

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Try solving it using constant additional space.

Example:

Input: 

                  ______
                 |     |
                 \/    |
        1 -> 2 -> 3 -> 4

Return the node corresponding to node 3.
"""


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param A : head node of linked list
    # @return the head node in the linked list
    def detectCycle(self, A):
        fast = A
        slow = A
        #find point where fast and slow meet for cycles
        while(fast.next!=None and fast.next.next!=None):
            fast = fast.next.next
            slow = slow.next
            if(fast == slow):
                break
        if(fast == slow):
            tmp = A
            while(fast!=tmp):
                fast = fast.next
                tmp = tmp.next
            return tmp
        else:
            return None


