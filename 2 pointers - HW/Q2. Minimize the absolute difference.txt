"""
Q2. Minimize the absolute difference


Given three sorted arrays A, B and Cof not necessarily same sizes.

Calculate the minimum absolute difference between the maximum and minimum number from the triplet a, b, c such that a, b, c belongs arrays A, B, C respectively. i.e. minimize | max(a,b,c) - min(a,b,c) |.

Example :

Input:

A : [ 1, 4, 5, 8, 10 ]
B : [ 6, 9, 15 ]
C : [ 2, 3, 6, 6 ]
Output:

1
Explanation: We get the minimum difference for a=5, b=6, c=6 as | max(a,b,c) - min(a,b,c) | = |6-5| = 1.

"""


class Solution:
	# @param A : list of integers
	# @param B : list of integers
	# @param C : list of integers
	# @return an integer
	def solve(self, A, B, C):
        ans = float('inf')
        i,j,k = 0, 0 , 0
        while(i<len(A) and j < len(B) and k<len(C)):
            minelem = min(A[i],B[j],C[k])
            val = abs(max(A[i],B[j],C[k]) - minelem)
            ans = min(val,ans)

            if(A[i] == minelem):
                i+=1
                elif(mini==B[j]):
                j+=1
            else:
                k+=1
        return ans
            
    
    
    def solve(self, A, B, C):
        ans = float('inf')
        i , j,k =0,0,0
        while(i<len(A) and j<len(B) and k<len(C)):
            mini = min(A[i],B[j],C[k])
            diff = max(A[i],B[j],C[k]) - mini
            ans = min(ans,diff)
            if(mini==A[i]):
                i+=1
            elif(mini==B[j]):
                j+=1
            else:
                k+=1
        return ans
