"""
Problem Description

An arithmetic expression is given by a charater array A of size N. Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each character may be an integer or an operator.



Problem Constraints

1 <= N <= 105



Input Format

The only argument given is character array A.



Output Format

Return the value of arithmetic expression formed using reverse Polish Notation.



Example Input

Input 1:
    A =   ["2", "1", "+", "3", "*"]
Input 2:
    A = ["4", "13", "5", "/", "+"]


Example Output

Output 1:
    9
Output 2:
    6


Example Explanation

Explaination 1:
    starting from backside:
    * : () * ()
    3 : () * (3)
    + : (() + ()) * (3)
    1 : (() + (1)) * (3)
    2 : ((2) + (1)) * (3)
    ((2) + (1)) * (3) = 9
Explaination 2:
    + : () + ()
    / : () + (() / ())
    5 : () + (() / (5))
    1 : () + ((13) / (5))
    4 : (4) + ((13) / (5))
    (4) + ((13) / (5)) = 6

"""



import operator
class Solution:

	# @param A : list of strings
	# @return an integer
    def __init__(self):
        

        self.ops = {
            '+' : operator.add,
            '-' : operator.sub,
            '*' : operator.mul,
            '/' : operator.truediv,  
            
        }
    def evaluate(self,A,exp):
        """
        evaluated post fix notation using recursion
        """
        op1,op2 = None, None
        if(exp in self.ops):
            op1 = A.pop()
            if(op1 in self.ops):
                op1 = self.evaluate(A,op1)
            else:
                op1 = int(op1)
            
            op2 = A.pop()
            if(op2 in self.ops):
                op2 = self.evaluate(A,op2)
            else:
                op2 = int(op2)
            
            return int(self.ops[exp](op2, op1))


	def evalRPN(self, A):
        if(len(A)==1):
            return int(A[0])
        return self.evaluate(A,A.pop())
