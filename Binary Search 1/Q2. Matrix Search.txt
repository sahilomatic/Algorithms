"""
Q2. Matrix Search

Problem Description
Given a matrix of integers A of size N x M and an integer B. Write an efficient algorithm that searches for integer B in matrix A.

This matrix A has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than or equal to the last integer of the previous row.
Return 1 if B is present in A, else return 0.

NOTE: Rows are numbered from top to bottom, and columns are from left to right.



Problem Constraints
1 <= N, M <= 1000
1 <= A[i][j], B <= 106



Input Format
The first argument given is the integer matrix A.
The second argument given is the integer B.



Output Format
Return 1 if B is present in A else, return 0.



Example Input
Input 1:

A = [ 
      [1,   3,  5,  7]
      [10, 11, 16, 20]
      [23, 30, 34, 50]  
    ]
B = 3
Input 2:

A = [   
      [5, 17, 100, 111]
      [119, 120, 127, 131]    
    ]
B = 3


Example Output
Output 1:

1
Output 2:

0


Example Explanation
Explanation 1:

 3 is present in the matrix at A[0][1] position so return 1.
Explanation 2:

 3 is not present in the matrix so return 0.



"""

class Solution:
    # @param A : list of list of integers
    # @param B : integer
    # @return an integer
    def return_row(self,A,B):
        # find row
        t, b = 0,len(A)-1
        row = -1
        if(B>=A[b][0]):
            return b
        while(t<=b):
            mid = t + (b-t)//2
            
            if(A[mid][0]<=B and A[mid+1][0]>B):
                return mid
            elif(A[mid][0]>B):
                b = mid-1
            else:
                t= mid + 1
        return row

    def searchMatrix2(self, A, B):

        # find row
        row = self.return_row(A,B)

        l,r = 0 , len(A[0])-1
        while(l<=r):
            mid = l + (r-l)//2
            if(A[row][mid]==B):
                return 1
            elif(A[mid]<B):
                l = mid + 1
            else:
                r = mid - 1
        return 0

    def searchMatrix(self, A, B):

        m = len(A)
        n = len(A[0])

        l,r = 0 , m*n -1 
        while(l<=r):
            mid = l + (r-l)//2
            i = mid//n
            j = mid%n
            val = A[i][j]
            if(val==B):
                return 1
            elif(val<B):
                l = mid + 1
            else:
                r = mid - 1
        return 0


