"""
Problem Description

Given an integer A, you have to find the Ath Perfect Number.

A Perfect Number has the following properties:

It comprises only 1 and 2.

The number of digits in a Perfect number is even.

It is a palindrome number.

For example 11, 22, 112211 are Perfect numbers, where 123, 121, 782, 1 are not.



Problem Constraints

1 <= A <= 100000



Input Format

The only argument given is an integer A.



Output Format

Return a string that denotes the Ath Perfect Number.



Example Input

Input 1:

 A = 2
Input 2:

 A = 3


Example Output

Output 1:

 22
Output 2:

 1111


Example Explanation

Explanation 1:

First four perfect numbers are:
1. 11
2. 22
3. 1111
4. 1221
Explanation 2:

First four perfect numbers are:
1. 11
2. 22
3. 1111
4. 1221


"""


from collections import deque

class Solution:
    # @param A : integer
    # @return a strings
    def solve(self, A):
        """
        Brute Force : iterate all number , till count becomes equal to A.
        Count is increase when number statisfies condition

        Optimized:
        x = queue.leftpop()
        observation : each new number = 10*x + count

        """

        q = deque()
        ans = []
        count = 1
        while(len(ans)<A):
            if(count<=2):
                
                q.append(count)
                count+=1
            
            else:
                x = str(q.popleft())
                val = x+ x[::-1]
                ans.append(int(val))
                counts = 1
                
                while(counts<=2):
                    new_val = int(x)*10 + counts
                    
                    
                    q.append(new_val)
                    counts+=1
            
        return ans[len(ans)-1]


            


